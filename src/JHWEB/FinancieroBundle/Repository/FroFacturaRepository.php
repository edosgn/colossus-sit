<?php

namespace JHWEB\FinancieroBundle\Repository;

/**
 * FroFacturaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FroFacturaRepository extends \Doctrine\ORM\EntityRepository
{
    //Obtiene el numero maximo de facturas por año
    public function getMaximo($anio)
    {
        $em = $this->getEntityManager();
        
        $dql = "SELECT MAX(f.consecutivo) AS maximo
            FROM JHWEBFinancieroBundle:FroFactura f
            WHERE YEAR(f.fechaCreacion) = :ANIO";

        $consulta = $em->createQuery($dql);
        $consulta->setParameter('ANIO', $anio);

        return $consulta->getOneOrNullResult();
    }

    //=======================================para reportes de ingresos=======================================//
    ////Obtiene trámites solicitud según el filtro de búsqueda diario
    /* public function findTramitesGeneral($fecha, $idOrganismoTransito) {
        $em = $this->getEntityManager();

        $dql = "SELECT fts
            FROM JHWEBFinancieroBundle:FroTrteSolicitud fts,
            JHWEBFinancieroBundle:FroFactura ff,
            JHWEBFinancieroBundle:FroFacTramite fft
            WHERE fts.organismoTransito = :idOrganismoTransito 
            AND fts.tramiteFactura = fft.id
            AND fft.factura = ff.id
            AND ff.fechaPago = :fecha";

        $consulta = $em->createQuery($dql);

        $consulta->setParameters(array(
            'idOrganismoTransito' => $idOrganismoTransito, 
            'fecha' => $fecha,
        ));
        
        return $consulta->getResult();
    } */
    
    //Obtiene trámites solicitud según el filtro de búsqueda mensual
    public function findTramites($fechaInicio, $fechaFin, $arrayOrganismosTransito) {
        $em = $this->getEntityManager();

        $condicion = null; 
        
        $dql = "SELECT fts
            FROM JHWEBFinancieroBundle:FroTrteSolicitud fts,
            JHWEBFinancieroBundle:FroFactura ff,
            JHWEBFinancieroBundle:FroFacTramite fft, 
            JHWEBFinancieroBundle:FroTrtePrecio ftp
            WHERE fts.tramiteFactura = fft.id
            AND fft.factura = ff.id
            AND ff.fechaPago BETWEEN :fechaInicio AND :fechaFin
            AND fft.precio = ftp.id";

        if ($arrayOrganismosTransito) {
            foreach ($arrayOrganismosTransito as $keyOrganismoTransito => $idOrganismoTransito) {
                if($keyOrganismoTransito == 0) {
                    $condicion .= " AND fts.organismoTransito = '" . $idOrganismoTransito . "'";
                } else {
                    $condicion .= " OR fts.organismoTransito = '" . $idOrganismoTransito . "'";
                }
            }
        }

        $condicion .=  " GROUP BY ftp.tramite";

        if ($condicion) {
            $dql .= $condicion;
        }

        $consulta = $em->createQuery($dql);

        $consulta->setParameters(array(
            'fechaInicio' => $fechaInicio,
            'fechaFin' => $fechaFin,
        ));

        return $consulta->getResult();
    }

    //cuenta los tramites de acuerdo al nombre
    public function getTramiteByName($idTramite) {
        $em = $this->getEntityManager();

        $dql = "SELECT COUNT(ftp.id)
            FROM JHWEBFinancieroBundle:FroTrtePrecio ftp
            WHERE ftp.tramite = :idTramite";

        $consulta = $em->createQuery($dql);
        
        $consulta->setParameters(array(
            'idTramite' => $idTramite, 
        ));

        return $consulta->getOneOrNullResult();
    }

    //obtiene sustratos de acuerdo al numero de factura
    public function getSustratos($fechaInicio, $fechaFin) {
        $em = $this->getEntityManager();

        $dql = "SELECT COUNT(fi.id) AS cantidad, t.id, t.nombre, iv.valor, COUNT(fi.id) * iv.valor AS total
        FROM JHWEBFinancieroBundle:FroFacInsumo fi, JHWEBInsumoBundle:ImoInsumo i,
            JHWEBInsumoBundle:ImoCfgTipo t, JHWEBInsumoBundle:ImoCfgValor iv,
            JHWEBFinancieroBundle:FroFacTramite ft,
            JHWEBFinancieroBundle:FroTrteSolicitud fts, 
            JHWEBFinancieroBundle:FroFactura f
        
            WHERE fi.id = fi.insumo
            AND fi.factura = f.id
            AND f.id = ft.factura
            AND fts.tramiteFactura = ft.id
            AND f.fechaPago BETWEEN :fechaInicio AND :fechaFin
            AND f.estado = 'FINALIZADA'
            AND fi.insumo = i.id
            AND i.tipo = t.id
            AND t.categoria = 'SUSTRATO'
            AND iv.tipo = t.id
            GROUP BY t.nombre";

        $consulta = $em->createQuery($dql);
        
        $consulta->setParameters(array(
            'fechaInicio' => $fechaInicio, 
            'fechaFin' => $fechaFin
        ));

        return $consulta->getResult();
    }

    //obtiene los conceptos en un rango de fechas especifico
    public function getConceptos($fechaInicio, $fechaFin) {
        $em = $this->getEntityManager();
        
        $dql = "SELECT COUNT(ftcc.id) AS cantidad ,ftcc.id, ftcc.nombre, ftcc.valor, COUNT(ftcc.id) * ftcc.valor AS total
        FROM JHWEBFinancieroBundle:FroTrteConcepto ftc,
            JHWEBFinancieroBundle:FroTrtePrecio ftp, 
            JHWEBFinancieroBundle:FroFacTramite ft,
            JHWEBFinancieroBundle:FroTrteSolicitud fts, 
            JHWEBFinancieroBundle:FroTrteCfgConcepto ftcc,
            JHWEBFinancieroBundle:FroFactura f

            WHERE ftp.id = ft.precio 
            AND ftp.id = ftc.precio 
            AND ftc.concepto != 2
            AND fts.tramiteFactura = ft.id
            AND ftcc.id = ftc.concepto
            AND ft.factura = f.id
            AND ft.precio = ftp.id
            AND f.fechaPago BETWEEN :fechaInicio AND :fechaFin
            AND f.estado = 'FINALIZADA'
            AND ftc.activo = 1 
            GROUP BY ftcc.id";
        
        $consulta = $em->createQuery($dql);

        $consulta->setParameters(array(
            'fechaInicio' => $fechaInicio,
            'fechaFin' => $fechaFin,
        ));

        return $consulta->getResult();
    }

    /*  =============== para infracciones ================= */

    public function getInfraccionesByFecha($fechaInicioDatetime, $fechaFinDatetime, $idOrganismoTransito) {
        $em = $this->getEntityManager();

        $dql = "SELECT ccc
            FROM JHWEBContravencionalBundle:CvCdoComparendo ccc
            WHERE ccc.organismoTransito = :idOrganismoTransito 
            AND ccc.fecha BETWEEN :fechaInicio AND :fechaFin";

        $consulta = $em->createQuery($dql);
        
        $consulta->setParameters(array(
            'idOrganismoTransito' => $idOrganismoTransito, 
            'fechaInicio' => $fechaInicioDatetime,
            'fechaFin' => $fechaFinDatetime,
        ));

        return $consulta->getResult();
    }

    /*  =============== para acuerdos de pago ================= */

    public function getAcuerdosPagoByFecha($fechaInicioDatetime, $fechaFinDatetime, $idOrganismoTransito) {
        $em = $this->getEntityManager();

        $dql = "SELECT fa
            FROM JHWEBFinancieroBundle:FroAmortizacion fa, JHWEBContravencionalBundle:CvCdoComparendo ccc,
            JHWEBFinancieroBundle:FroAcuerdoPago fap
            WHERE ccc.organismoTransito = :idOrganismoTransito 
            AND ccc.acuerdoPago = fap.id
            AND fa.acuerdoPago = fap.id
            AND fap.fecha BETWEEN :fechaInicio AND :fechaFin";

        $consulta = $em->createQuery($dql);
        
        $consulta->setParameters(array(
            'idOrganismoTransito' => $idOrganismoTransito, 
            'fechaInicio' => $fechaInicioDatetime,
            'fechaFin' => $fechaFinDatetime,
        ));

        return $consulta->getResult();
    }

    /*  =============== para parqueadero ================= */

    public function getInmovilizacionesByFecha($fechaInicioDatetime, $fechaFinDatetime, $idOrganismoTransito) {
        $em = $this->getEntityManager();

        $dql = "SELECT ffp
            FROM JHWEBParqueaderoBundle:PqoInmovilizacion pqi, JHWEBContravencionalBundle:CvCdoComparendo ccc, 
            JHWEBFinancieroBundle:FroFactura ff, JHWEBFinancieroBundle:FroFacParqueadero ffp
            WHERE  ffp.factura = ff.id
            AND ff.organismoTransito = :idOrganismoTransito 
            AND ffp.inmovilizacion = pqi.id
            AND pqi.fechaSalida BETWEEN :fechaInicio AND :fechaFin";

        $consulta = $em->createQuery($dql);
        
        $consulta->setParameters(array(
            'idOrganismoTransito' => $idOrganismoTransito, 
            'fechaInicio' => $fechaInicioDatetime,
            'fechaFin' => $fechaFinDatetime,
        ));

        return $consulta->getResult();
    }

    /*  =============== para retefuente ================= */

    public function getRetefuentesByFecha($fechaInicioDatetime, $fechaFinDatetime, $idOrganismoTransito) {
        $em = $this->getEntityManager();

        $dql = "SELECT ffr
            FROM JHWEBFinancieroBundle:FroFacRetefuente ffr, JHWEBFinancieroBundle:FroFactura ff 
            WHERE  ffr.factura = ff.id
            AND ff.organismoTransito = :idOrganismoTransito 
            AND ffr.fecha BETWEEN :fechaInicio AND :fechaFin";

        $consulta = $em->createQuery($dql);
        
        $consulta->setParameters(array(
            'idOrganismoTransito' => $idOrganismoTransito, 
            'fechaInicio' => $fechaInicioDatetime,
            'fechaFin' => $fechaFinDatetime,
        ));

        return $consulta->getResult();
    }

    public function getByFilters($params){
        $em = $this->getEntityManager();

        switch ($params->tipoFiltro) {
            case 1:
                $dql = "SELECT f
                FROM JHWEBFinancieroBundle:FroFactura f
                WHERE f.numero = :filtro";

                $consulta = $em->createQuery($dql);
                $consulta->setParameters(array(
                    'filtro' => $params->filtro,
                ));
                break;

            case 2:
                $dql = "SELECT f
                FROM JHWEBFinancieroBundle:FroFactura f,
                JHWEBConfigBundle:CfgOrganismoTransito o
                WHERE f.organismoTransito = o.id
                AND o.id = :filtro
                AND f.fechaCreacion BETWEEN :fechaInicial AND :fechaFinal";

                $consulta = $em->createQuery($dql);
                $consulta->setParameters(array(
                    'filtro' => $params->filtro,
                    'fechaInicial' => $params->fechaInicial,
                    'fechaFinal' => $params->fechaFinal,
                ));
                break;

            case 3:
                $dql = "SELECT f
                FROM JHWEBFinancieroBundle:FroFactura f
                WHERE f.valorNeto = :filtro
                AND f.fechaCreacion BETWEEN :fechaInicial AND :fechaFinal";

                $consulta = $em->createQuery($dql);
                $consulta->setParameters(array(
                    'filtro' => $params->filtro,
                    'fechaInicial' => $params->fechaInicial,
                    'fechaFinal' => $params->fechaFinal,
                ));
                break;
        }

        return $consulta->getResult();
    }
}
